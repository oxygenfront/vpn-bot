import { Injectable } from '@nestjs/common';
import { PrismaService } from 'nestjs-prisma';
import { InjectBot } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { MyContext } from './interfaces/telegram.interface';


@Injectable()
export class TelegramService {

    constructor(
        @InjectBot() private readonly bot: Telegraf,
        private readonly prismaService: PrismaService
    ) {
    }

    // First level bot

    async handleStart( ctx: MyContext ) {

        const text = `üîí –ü—Ä–∏–≤–µ—Ç\\! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN\\-–º–∞–≥–∞–∑–∏–Ω –æ—Ç *_Oxygen\\!_*
–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º __–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ__ –∏ __–±—ã—Å—Ç—Ä—ã–µ__ —Å–µ—Ä–≤–µ—Ä–∞ –∫ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è *_Amnezia_* –∏ *_Hiddify_*\\.

‚úÖ *_–ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å_*
üöÄ *_–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è_*
üí∞ *_–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã_*

üìå –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â—ë–Ω–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É —É–∂–µ —Å–µ–π—á–∞—Å\\!`
        try {
            if ( ctx.callbackQuery ) {
                await ctx.editMessageText(text, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üë§ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç',
                                    callback_data: 'my_account'
                                },
                                {
                                    text: 'ü™ô –ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω',
                                    callback_data: 'buy_token'
                                },
                            ],
                            [
                                {
                                    text: 'ü§î –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω ?',
                                    callback_data: 'how_use_token'
                                }
                            ],
                            [
                                { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' },
                                {
                                    text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                                    callback_data: 'settings'
                                },
                            ],
                        ],
                    },
                    parse_mode: 'MarkdownV2'

                });
            } else {
                await ctx.reply(text, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üë§ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç',
                                    callback_data: 'my_account'
                                },
                                {
                                    text: 'ü™ô –ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω',
                                    callback_data: 'buy_token'
                                },
                            ],
                            [
                                {
                                    text: 'ü§î –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω ?',
                                    callback_data: 'how_use_token'
                                }
                            ],
                            [
                                { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' },
                                {
                                    text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                                    callback_data: 'settings'
                                },
                            ],
                        ],
                    },
                    parse_mode: 'MarkdownV2'
                });
            }
        } catch ( error ) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

// ------------------------------------------------------------------

    // Second level

    async handleMyAccount( ctx: MyContext ) {
        try {
            if ( ctx.callbackQuery ) {
                await ctx.editMessageText('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üí∞ –ú–æ–∏ —Ç–æ–∫–µ–Ω—ã',
                                    callback_data: 'my_tokens'
                                },
                                {
                                    text: 'üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫',
                                    callback_data: 'history_purchased'
                                },
                            ],
                            [ { text: 'üîô –ú–µ–Ω—é', callback_data: 'start' },
                                {
                                    text: 'üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                                    callback_data: 'renew_subscription'
                                },

                            ]
                        ]
                    }
                })
            } else {
                await ctx.reply('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üí∞ –ú–æ–∏ —Ç–æ–∫–µ–Ω—ã',
                                    callback_data: 'my_tokens'
                                },
                                {
                                    text: 'üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫',
                                    callback_data: 'history_purchased'
                                },
                            ],
                            [ { text: 'üîô –ú–µ–Ω—é', callback_data: 'start' },
                                {
                                    text: 'üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                                    callback_data: 'renew_subscription'
                                }

                            ]
                        ]
                    }
                })
            }
        } catch ( error ) {
            console.error(error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        }
    }

    async handleHowUseToken( ctx: MyContext ) {
        const text = `–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω ?\n–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –∫–æ—Ç–æ—Ä–æ–º –∂–µ–ª–∞–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω\\.\n\n_–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:_\n\n*_–û–±–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è_* ‚Äî \`AmneziaVPN\` –∏ \`Hiddify\` ‚Äî __*–ø—Ä–æ—Å—Ç—ã –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏*__ –∏ –æ–±–µ—Å–ø–µ—á–∞—Ç –≤–∞–º __*–±–µ–∑–æ–ø–∞—Å–Ω—ã–π*__ –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏\\. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º —É–¥–æ–±–Ω–µ–µ:\n\n\\ \\- \`AmneziaVPN\` –∏ \`Hiddify\` *_–æ–¥–∏–Ω–∞–∫–æ–≤–æ –ª–µ–≥–∫–æ_* –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –∏ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è *_–±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è_*\\.\n\\ \\- –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å, –∏—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏–ª–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\\.`
        try {
            if ( ctx.callbackQuery ) {
                await ctx.editMessageText(text, {
                    reply_markup: {
                        inline_keyboard: [ [ {
                            text: 'üîí AmneziaVPN',
                            url: 'https://telegra.ph/Kak-ispolzovat-token-v-AmneziaVPN-02-26'
                        }, {
                            text: 'üïµÔ∏è Hiddify',
                            url: 'https://telegra.ph/Kak-ispolzovat-token-v-HiddifyVPN-02-26'
                        } ], [
                            { text: 'üîô –ú–µ–Ω—é', callback_data: 'start' }
                        ] ]
                    },
                    parse_mode: 'MarkdownV2'
                })
            } else {
                await ctx.reply(text, {
                    reply_markup: {
                        inline_keyboard: [ [ {
                            text: 'üîí AmneziaVPN',
                            url: 'https://telegra.ph/Kak-ispolzovat-token-v-AmneziaVPN-02-26'
                        }, {
                            text: 'üïµÔ∏è Hiddify',
                            url: 'https://telegra.ph/Kak-ispolzovat-token-v-HiddifyVPN-02-26'
                        } ], [
                            { text: 'üîô –ú–µ–Ω—é', callback_data: 'start' }
                        ] ]
                    },
                    parse_mode: 'MarkdownV2'
                })
            }
        } catch ( error ) {
            console.error(error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        }
    }

    async handleBuyToken( ctx: MyContext ) {
        try {
            if ( ctx.callbackQuery ) {
                await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏: ', {
                    reply_markup: {
                        inline_keyboard: [ [ {
                            text: '–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥',
                            callback_data: 'promocode'
                        } ], [
                            { text: 'üîô –ú–µ–Ω—é', callback_data: 'start' }
                        ] ]
                    }
                })
            } else {
                await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏: ', {
                    reply_markup: {
                        inline_keyboard: [ [ {
                            text: '–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥',
                            callback_data: 'promocode'
                        } ], [
                            { text: 'üîô –ú–µ–Ω—é', callback_data: 'start' }
                        ] ]
                    }
                })
            }
        } catch ( error ) {
            console.error(error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        }
    }

    async handleHelp( ctx: MyContext ) {
        const text = `–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã, –∞ —Ç–∞–∫–∂–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º\\.`
        try {
            if ( ctx.callbackQuery ) {
                await ctx.editMessageText(text, {
                    reply_markup: {
                        inline_keyboard: [ [ {
                            text: '‚ùì FAQ',
                            callback_data: 'faq'
                        }, {
                            text: 'üåü –û—Ç–∑—ã–≤',
                            url: 'https://t.me/vpn_by_oxy_support'
                        } ], [ { text: 'üîô –ú–µ–Ω—é', callback_data: 'start' }, {
                            text: 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                            url: 'https://t.me/vpn_by_oxy_support'
                        } ] ]
                    },
                    parse_mode: 'MarkdownV2'
                })
            } else {
                await ctx.reply(text, {
                    reply_markup: {
                        inline_keyboard: [ [ {
                            text: '‚ùì FAQ',
                            callback_data: 'faq'
                        }, {
                            text: 'üåü –û—Ç–∑—ã–≤',
                            url: 'https://t.me/vpn_by_oxy_support'
                        } ], [ { text: 'üîô –ú–µ–Ω—é', callback_data: 'start' }, {
                            text: 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                            url: 'https://t.me/vpn_by_oxy_support'
                        } ] ]
                    },
                    parse_mode: 'MarkdownV2'
                })
            }
        } catch ( error ) {
            console.error(error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        }
    }

    async handleSettings( ctx: MyContext ) {
        try {
            if ( ctx.callbackQuery ) {
                await ctx.editMessageText('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
                    reply_markup: {
                        inline_keyboard: [ [ {
                            text: 'üåê –Ø–∑—ã–∫',
                            callback_data: 'languages'
                        }, {
                            text: 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                            callback_data: 'notifications'
                        } ], [ {
                            text: 'üõ°Ô∏è –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
                            callback_data: 'privacy_policy'
                        } ], [
                            { text: 'üîô –ú–µ–Ω—é', callback_data: 'start' }
                        ] ]
                    }
                })
            } else {
                await ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
                    reply_markup: {
                        inline_keyboard: [ [ {
                            text: 'üåê –Ø–∑—ã–∫',
                            callback_data: 'languages'
                        }, {
                            text: 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                            callback_data: 'notifications'
                        } ], [ {
                            text: 'üõ°Ô∏è –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
                            callback_data: 'privacy_policy'
                        } ], [
                            { text: 'üîô –ú–µ–Ω—é', callback_data: 'start' }
                        ] ]
                    }
                })
            }
        } catch ( error ) {
            console.error(error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        }
    }

    async handlePromoCode( ctx: MyContext ) {
        if ( !ctx.session.promocode || ctx.session.promocode.length === 0 ) {
            await ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥', {
                reply_markup: {
                    inline_keyboard: [ [ {
                        text: 'üîô –ù–∞–∑–∞–¥',
                        callback_data: 'buy_token'
                    } ] ],
                },
            });
        } else {
            await ctx.editMessageText(
                `–í—ã —É–∂–µ –≤–≤–µ–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥: ${ctx.session.promocode}.\n–ñ–µ–ª–∞–µ—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å?`,
                {
                    reply_markup: {
                        inline_keyboard: [
                            [ {
                                text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥',
                                callback_data: 'change_promocode'
                            } ],
                            [
                                { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'buy_token' },
                                {
                                    text: '–ú–µ–Ω—é',
                                    callback_data: 'start'
                                },
                            ],
                        ],
                    },
                }
            );
        }
    }

    async handleFaq( ctx: MyContext ) {
        try {
            if ( ctx.callbackQuery ) {
                await ctx.editMessageText('–û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: ', {
                    reply_markup: {
                        inline_keyboard: [ [ {
                            text: 'üîÑ –ö–∞–∫ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                            url: 'https://telegra.ph/Kak-prodlit-podpisku-02-26'
                        }, {
                            text: '‚ùå –¢–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
                            url: 'https://telegra.ph/Token-ne-rabotaet-chto-delat-02-26'
                        } ], [ { text: 'üîô –ú–µ–Ω—é', callback_data: 'start' }, {
                            text: 'üíª –ö–∞–∫–æ–π –∫–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞—Ç—å',
                            url: 'https://telegra.ph/Kakoj-klient-vybrat-02-26'
                        } ] ]
                    },
                    parse_mode: 'MarkdownV2'
                })
            } else {
                await ctx.reply('–û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: ', {
                    reply_markup: {
                        inline_keyboard: [ [ {
                            text: 'üîÑ –ö–∞–∫ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                            url: 'https://telegra.ph/Kak-prodlit-podpisku-02-26'
                        }, {
                            text: '‚ùå –¢–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
                            url: 'https://telegra.ph/Token-ne-rabotaet-chto-delat-02-26'
                        } ], [ { text: 'üîô –ú–µ–Ω—é', callback_data: 'start' }, {
                            text: 'üíª –ö–∞–∫–æ–π –∫–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞—Ç—å',
                            url: 'https://telegra.ph/Kakoj-klient-vybrat-02-26'
                        } ] ]
                    },
                    parse_mode: 'MarkdownV2'
                })
            }
        } catch ( error ) {
            console.error(error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        }
    }

}