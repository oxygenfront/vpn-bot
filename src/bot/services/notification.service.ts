import { Injectable } from '@nestjs/common';
import { InjectBot } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { UserService } from './user.service';

@Injectable()
export class NotificationService {
    constructor(
        @InjectBot() private readonly bot: Telegraf,
        private readonly userService: UserService,
    ) {
    }

    async sendNotification( userId: number, type: 'expiry' | 'news' | 'promo' | 'status', message: string ) {
        const settings = await this.userService.getUserNotificationSettings({ from: { id: userId } } as any);
        const shouldSend = {
            expiry: settings.expiryReminder,
            news: settings.newsAndUpdates,
            promo: settings.promotions,
            status: settings.serviceStatus,
        }[type];

        if ( shouldSend ) {
            await this.bot.telegram.sendMessage(userId, message, { parse_mode: 'MarkdownV2' });
        }
    }

    async sendExpiryReminder( userId: number, daysLeft: number ) {
        const message = `‚ö†Ô∏è *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${daysLeft} –¥–Ω–µ–π\\.\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–ª—è –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–æ–π —Ä–∞–±–æ—Ç—ã\\!\n\n_–ù–∞–∂–º–∏—Ç–µ /buy\\_token –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è_`;
        await this.sendNotification(userId, 'expiry', message);
    }

    async sendPromoNotification( userId: number, promoCode: string, discount: number ) {
        const message = `üéâ *–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ \`${promoCode}\`\n–∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É ${discount}% –Ω–∞ –ª—é–±–æ–π —Ç–∞—Ä–∏—Ñ\\!\n\n_–ê–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è_`;
        await this.sendNotification(userId, 'promo', message);
    }
}