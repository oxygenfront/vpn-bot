generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

enum Status {
  Cancelled
  Active
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String             @id @unique
  telegramId    String             @unique
  username      String?
  cardToken     String
  langCode      String             @default("ru")
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  subscriptions UserSubscription[]
  PromocodeUse  PromocodeUse[]
}

model Plan {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  trafficLimit      String
  subscriptionPlans SubscriptionPlan[]
}

model DeviceRange {
  id                Int                @id @default(autoincrement())
  range             String             @unique
  subscriptionPlans SubscriptionPlan[]
}

model SubscriptionPlan {
  id                Int                @id @default(autoincrement())
  planId            Int
  deviceRangeId     Int
  months            Int
  price             Float
  plan              Plan               @relation(fields: [planId], references: [id])
  deviceRange       DeviceRange        @relation(fields: [deviceRangeId], references: [id])
  userSubscriptions UserSubscription[]

  @@unique([planId, deviceRangeId, months])
}

model UserSubscription {
  id                  String           @id @unique
  userId              String
  startBillingDate    DateTime
  nextBillingDate     DateTime
  expiredDate         DateTime
  lastInvoiceId       String
  createdAt           DateTime
  status              Status
  vlessLinkConnection String
  urlLinkConnection   String
  subscriptionPlanId  Int
  usedPromocode       Promocode?       @relation(fields: [promocodeId], references: [id])
  user                User             @relation(fields: [userId], references: [id])
  subscriptionPlan    SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
  promocodeId         String?

  @@index([userId])
}

model Promocode {
  id                   String             @id @default(uuid())
  promocode            String?            @unique
  type                 String
  value                Float
  expiredDate          DateTime?
  minOrderAmount       Float
  minMonthsOrderAmount Int
  availableCountUses   Int
  maxUsesPerUser       Int                @default(1)
  status               String             @default("ACTIVE") // ACTIVE, INACTIVE, DELETED
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  uses                 PromocodeUse[]
  UserSubscription     UserSubscription[]
}

model PromocodeUse {
  id          String    @id @default(uuid())
  promocodeId String
  promocode   Promocode @relation(fields: [promocodeId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  usedAt      DateTime  @default(now())
}
