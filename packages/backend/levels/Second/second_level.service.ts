import { Injectable } from "@nestjs/common";
import * as dayjs from "dayjs";
import { PrismaService } from "nestjs-prisma";
import { InjectBot } from "nestjs-telegraf";
import { Telegraf } from "telegraf";
import { MyContext, Plans } from "../../interfaces/telegram.interface";
import { UserService } from "../../services/user.service";
import { TelegramUtils } from "../../utils/telegram-utils";

@Injectable()
export class SecondLevelService {
    constructor(
        @InjectBot() private readonly bot: Telegraf,
        private readonly userService: UserService,
        private readonly telegramUtils: TelegramUtils,
        private readonly prismaService: PrismaService
    ) {
    }

    async handleMyAccount( ctx: MyContext ) {
        const user = await this.prismaService.user.findFirst({
            where: {
                telegramId: String(ctx.callbackQuery!.from.id)
            },
            include: {
                subscriptions: {
                    include: { subscriptionPlan: true }
                }
            }
        })
        const subscriptions = user ? user.subscriptions?.map(( subscription ) => {
            return `üü¢ ${Plans[subscription.subscriptionPlan.planId]} –¥–æ ${dayjs(subscription.expiredDate).format('DD.MM.YYYY  HH:mm:ss')}`
        }).join(`\n------------------------------------------------------------\n`) : '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫'

        const activeDevices = await this.userService.getActiveDevices(ctx);
        const status = await this.userService.getUserStatus(ctx);
        const text = `üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*
        
*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ üìä –î–Ω–µ–π —Å –Ω–∞–º–∏: ${user?.createdAt
            ? Math.floor(dayjs().diff(dayjs(user.createdAt), 'day'))
            : 0}
‚Ä¢ üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${this.telegramUtils.escapeMarkdown(String(activeDevices))}
‚Ä¢ ‚≠êÔ∏è –°—Ç–∞—Ç—É—Å: ${status}

*–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?* –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É 24/7`;

        const keyboard = {
            inline_keyboard: [

                [
                    ...(subscriptions.length ? [ {
                        text: 'üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏',
                        callback_data: 'my_subscriptions'
                    } ] : []),

                ],
                ...(subscriptions.length ?
                    [
                        [
                            {
                                text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                                url: 'https://my.cloudpayments.ru/',
                            }
                        ]
                    ] : []),
                [
                    {
                        text: 'üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                        callback_data: 'start'
                    },
                    {
                        text: 'üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                        url: 'https://t.me/vpn_by_oxy/8'
                    }
                ]
            ],
        };

        await this.telegramUtils.sendOrEditMessage(ctx, this.telegramUtils.escapeMarkdown(text), keyboard);
    }

    async handleBuyToken( ctx: MyContext ) {
        ctx.session.selectedPlan = undefined;
        const minPrices = await this.prismaService.subscriptionPlan.findMany({
            where: { deviceRangeId: 1, months: 1 },
        })
        const text = `üí´ *–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω:*
        
ü•á *–ü—Ä–µ–º–∏—É–º \\- –æ—Ç ${minPrices[0].price}‚ÇΩ/–º–µ—Å—è—Ü*
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
‚Ä¢ 1\\-7 —É—Å—Ç—Ä–æ–π—Å—Ç–≤
‚Ä¢ VIP –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ _–≠–∫–æ–Ω–æ–º–∏—è 60%_

ü•à *–°—Ç–∞–Ω–¥–∞—Ä—Ç \\- –æ—Ç ${minPrices[1].price}‚ÇΩ/–º–µ—Å—è—Ü*
‚Ä¢ 200GB —Ç—Ä–∞—Ñ–∏–∫–∞
‚Ä¢ 1\\-7 —É—Å—Ç—Ä–æ–π—Å—Ç–≤
‚Ä¢ _–≠–∫–æ–Ω–æ–º–∏—è 40%_

ü•â *–ë–∞–∑–æ–≤—ã–π \\- –æ—Ç ${minPrices[2].price}‚ÇΩ/–º–µ—Å—è—Ü*
‚Ä¢ 100GB —Ç—Ä–∞—Ñ–∏–∫–∞
‚Ä¢ 1\\-7 —É—Å—Ç—Ä–æ–π—Å—Ç–≤`;

        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üíé –ü—Ä–µ–º–∏—É–º', callback_data: 'plan_premium' },
                    { text: '‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç', callback_data: 'plan_standard' },
                ],
                [ { text: 'üü¢ –ë–∞–∑–æ–≤—ã–π', callback_data: 'plan_base' } ],
                // [ { text: 'üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data: 'promocode' } ],
                [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'start' } ],
            ],
        };

        await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard);
    }

    async handleHelp( ctx: MyContext ) {
        const text = `üë®‚Äçüíª *–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏*

*–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å\\!*

‚Ä¢ üïê –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ 30 –º–∏–Ω—É—Ç
‚Ä¢ üìÖ –†–∞–±–æ—Ç–∞–µ–º: 24/7
‚Ä¢ üåç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º

*–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è:*
‚Ä¢ üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ üí≥ –í–æ–ø—Ä–æ—Å—ã –æ–ø–ª–∞—Ç—ã
‚Ä¢ üéÅ –ê–∫—Ü–∏–∏ –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã
‚Ä¢ üí¨ –î—Ä—É–≥–æ–µ

_–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, –∏ –º—ã –ø–æ–º–æ–∂–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ\\!_`;

        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üîß –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'tech_support' },
                    {
                        text: 'üí≥ –í–æ–ø—Ä–æ—Å—ã –æ–ø–ª–∞—Ç—ã',
                        callback_data: 'payment_support'
                    },
                ],
                [ {
                    text: 'üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
                    callback_data: 'write_message'
                } ],
                [
                    { text: '‚ùì FAQ', callback_data: 'faq' },
                    { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'start' },
                ],
            ],
        };

        await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard);
    }

    async handleSettings( ctx: MyContext ) {
        const text = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*

*–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞:*

‚Ä¢ üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
‚Ä¢ üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
‚Ä¢ üìã –§–æ—Ä–º–∞—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π

_–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:_`;

        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', callback_data: 'devices' },
                    { text: 'üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', callback_data: 'security' },
                ],
                [ {
                    text: 'üìã –§–æ—Ä–º–∞—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π',
                    callback_data: 'guide_format'
                } ],
                [ { text: 'üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' } ],
            ],
        };

        await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard);
    }
}