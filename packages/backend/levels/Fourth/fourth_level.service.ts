import { Injectable } from "@nestjs/common";
import { PrismaService } from "nestjs-prisma";
import {
    AvailablePlansEnum,
    MyContext
} from "../../interfaces/telegram.interface";
import { LinkGeneratorService } from "../../services/link-generator.service";
import { UserService } from "../../services/user.service";
import { XuiApiService } from "../../services/xui-api.service";
import { TelegramUtils } from "../../utils/telegram-utils";

@Injectable()
export class FourthLevelService {
    constructor(
        private readonly telegramUtils: TelegramUtils,
        private readonly userService: UserService,
        private readonly xuiApiService: XuiApiService,
        private readonly linkGeneratorService: LinkGeneratorService,
        private readonly prismaService: PrismaService,
    ) {
    }

    async handlePaymentHistory( ctx: MyContext ) {
        const history = await this.userService.getUserPaymentHistory(ctx);

        const text = `üí≥ *–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π*

${history.length > 0 ? '*–í–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:*' : '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π\\.'}
${history
            .map(
                ( payment, index ) => `
${index + 1}\\. ${payment.plan} ‚Äî ${payment.amount}$ üí∏
   üìÖ 01\\.${payment.month}\\.${payment.year} \\| ${payment.status === '–û–ø–ª–∞—á–µ–Ω–æ' ? '‚úÖ' : '‚ö†Ô∏è'} ${payment.status}`,
            )
            .join('\n')}

_–í—Å–µ–≥–æ: ${this.telegramUtils.escapeMarkdown(String(history.length))} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π_`;

        const keyboard = {
            inline_keyboard: [
                [ {
                    text: 'üì• –í—ã–≥—Ä—É–∑–∏—Ç—å —á–µ–∫–∏',
                    callback_data: 'download_receipts'
                } ],
                [ { text: 'üîô –ù–∞–∑–∞–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç', callback_data: 'my_account' } ],
            ],
        };

        await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard);
    }

    async handleDevices( ctx: MyContext ) {
        const devices = await this.userService.getUserDevices(ctx);

        const text = `üì± *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏*

*–ê–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:*
${devices
            .map(
                ( device, index ) => `
${index + 1}\\. ${this.telegramUtils.escapeMarkdown(device.name)}
‚Ä¢ üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${this.telegramUtils.escapeMarkdown(device.addedDate)}
‚Ä¢ üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${this.telegramUtils.escapeMarkdown(device.lastActive)}
‚Ä¢ üìä –¢—Ä–∞—Ñ–∏–∫: ${this.telegramUtils.escapeMarkdown(String(device.traffic))} GB`,
            )
            .join('\n')}

*–î–æ—Å—Ç—É–ø–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:* ${this.telegramUtils.escapeMarkdown(String(await this.userService.getAvailableDevices(ctx)))}
_–õ–∏–º–∏—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞_`;

        const keyboard = {
            inline_keyboard: [
                [ {
                    text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
                    callback_data: 'add_device'
                } ],
                ...devices.map(( device ) => [
                    {
                        text: `‚ùå –£–¥–∞–ª–∏—Ç—å ${device.name}`,
                        callback_data: `remove_device_${device.id}`
                    },
                ]),
                [
                    { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_devices' },
                    { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'settings' },
                ],
            ],
        };

        await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard);
    }

    async handleAddDevice( ctx: MyContext ) {
        const availableSlots = await this.userService.getAvailableDevices(ctx);

        if ( availableSlots <= 0 ) {
            const text = `‚ö†Ô∏è *–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤*

–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:
‚Ä¢ –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
‚Ä¢ –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Ç–∞—Ä–∏—Ñ —Å –±–æ–ª—å—à–∏–º –ª–∏–º–∏—Ç–æ–º

_–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å ${await this.userService.getDeviceLimit(ctx)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤_`;

            const keyboard = {
                inline_keyboard: [
                    [
                        {
                            text: '‚≠êÔ∏è –£–ª—É—á—à–∏—Ç—å —Ç–∞—Ä–∏—Ñ',
                            callback_data: 'upgrade_plan'
                        },
                        {
                            text: 'üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏',
                            callback_data: 'devices'
                        },
                    ],
                    [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'settings' } ],
                ],
            };

            await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard);
            return;
        }

        const text = `‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞*

*–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:*
‚Ä¢ üì± –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
‚Ä¢ üíª –ö–æ–º–ø—å—é—Ç–µ—Ä
‚Ä¢ üì∫ Smart TV
‚Ä¢ üéÆ –ò–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å

_–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ_`;

        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üì± –ú–æ–±–∏–ª—å–Ω–æ–µ', callback_data: 'add_mobile' },
                    { text: 'üíª –ö–æ–º–ø—å—é—Ç–µ—Ä', callback_data: 'add_computer' },
                ],
                [
                    { text: 'üì∫ Smart TV', callback_data: 'add_tv' },
                    { text: 'üéÆ –ö–æ–Ω—Å–æ–ª—å', callback_data: 'add_console' },
                ],
                [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'devices' } ],
            ],
        };

        await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard);
    }

    async handleChoosePlan( ctx: MyContext, planName: keyof typeof AvailablePlansEnum ) {
        ctx.session.selectedPlan = AvailablePlansEnum[planName];
        const minPrices = await this.prismaService.subscriptionPlan.findMany({
            where: { planId: ctx.session.selectedPlan, deviceRangeId: 1 },
        })

        const text = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏'
        const keyboard = {
            inline_keyboard: [ [ {
                text: `1 –º–µ—Å—è—Ü –æ—Ç ${minPrices[0].price}‚ÇΩ`,
                callback_data: 'month_1'
            }, {
                text: `3 –º–µ—Å—è—Ü–∞ –æ—Ç ${minPrices[1].price}‚ÇΩ`,
                callback_data: 'month_3'
            } ], [ {
                text: `6 –º–µ—Å—è—Ü–µ–≤ –æ—Ç ${minPrices[2].price}‚ÇΩ`,
                callback_data: 'month_6'
            }, {
                text: `12 –º–µ—Å—è—Ü–µ–≤ –æ—Ç ${minPrices[3].price}‚ÇΩ`,
                callback_data: 'month_12'
            } ], [ { text: '–ù–∞–∑–∞–¥', callback_data: 'buy_vpn' } ] ]
        }

        await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard)

    }

    async handleRemoveDevice( ctx: MyContext, deviceId: number ) {
        try {
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ UserService
            const deviceName = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'; // –ü–æ–ª—É—á–∏—Ç—å –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ UserService

            const text = `‚úÖ *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ*

–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "${this.telegramUtils.escapeMarkdown(deviceName)}" –±—ã–ª–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç VPN\\. 
_–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç_`;

            const keyboard = {
                inline_keyboard: [
                    [ {
                        text: 'üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏',
                        callback_data: 'devices'
                    } ],
                    [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'settings' } ],
                ],
            };

            await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard);
        } catch ( error ) {
            console.error('Error removing device:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.');
        }
    }

    async handlePaymentProcess( ctx: MyContext, method: string ) {
        const plan = await this.userService.getSelectedPlan(ctx);
        const finalPrice = this.telegramUtils.calculateFinalPrice(
            plan.price,
            ctx.session.promocode ? await this.userService.getPromoDiscount(ctx.session.promocode) : 0,
        );

        const text =
            method === 'card'
                ? `üí≥ *–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π*

*–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:* ${finalPrice}$

_–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–ø–ª–∞—Ç–µ\\._`
                : `‚Çø *–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π*

*–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:* ${finalPrice}$
*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:*
‚Ä¢ Bitcoin
‚Ä¢ Ethereum
‚Ä¢ USDT

_–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞_`;

        const keyboard = {
            inline_keyboard:
                method === 'card'
                    ? [
                        [ {
                            text: 'üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ',
                            callback_data: 'process_card_payment'
                        } ],
                        [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'buy_vpn' } ],
                    ]
                    : [
                        [
                            { text: 'Bitcoin', callback_data: 'crypto_btc' },
                            { text: 'Ethereum', callback_data: 'crypto_eth' },
                        ],
                        [ { text: 'USDT', callback_data: 'crypto_usdt' } ],
                        [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'buy_vpn' } ],
                    ],
        };

        await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard);
    }

    async handleNotifications( ctx: MyContext ) {
        const settings = await this.userService.getUserNotificationSettings(ctx);

        const text = `üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

*–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ ${settings.expiryReminder ? '‚úÖ' : '‚ùå'} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ ${settings.newsAndUpdates ? '‚úÖ' : '‚ùå'} –ù–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
‚Ä¢ ${settings.promotions ? '‚úÖ' : '‚ùå'} –ê–∫—Ü–∏–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ ${settings.serviceStatus ? '‚úÖ' : '‚ùå'} –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞

_–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:_`;

        const keyboard = {
            inline_keyboard: [
                [
                    {
                        text: `${settings.expiryReminder ? '‚úÖ' : '‚ùå'} –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏`,
                        callback_data: 'toggle_expiry_reminder',
                    },
                ],
                [
                    {
                        text: `${settings.newsAndUpdates ? '‚úÖ' : '‚ùå'} –ù–æ–≤–æ—Å—Ç–∏`,
                        callback_data: 'toggle_news',
                    },
                ],
                [
                    {
                        text: `${settings.promotions ? '‚úÖ' : '‚ùå'} –ê–∫—Ü–∏–∏`,
                        callback_data: 'toggle_promotions',
                    },
                ],
                [
                    {
                        text: `${settings.serviceStatus ? '‚úÖ' : '‚ùå'} –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞`,
                        callback_data: 'toggle_status',
                    },
                ],
                [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'settings' } ],
            ],
        };

        await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard);
    }

    async handleToggleSetting( ctx: MyContext, setting: string ) {
        try {
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ UserService
            const isEnabled = true; // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤—ã–∑–æ–≤ UserService

            const settingNames = {
                toggle_expiry_reminder: '–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏',
                toggle_news: '–ù–æ–≤–æ—Å—Ç–∏',
                toggle_promotions: '–ê–∫—Ü–∏–∏',
                toggle_status: '–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞',
            };

            const text = `‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞*

${this.telegramUtils.escapeMarkdown(settingNames[setting] || setting)}: ${isEnabled ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ'}`;

            await this.handleNotifications(ctx); // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        } catch ( error ) {
            console.error('Error toggling setting:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\\.');
        }
    }
}