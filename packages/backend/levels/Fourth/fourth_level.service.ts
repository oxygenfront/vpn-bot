import { Injectable } from "@nestjs/common";
import * as dayjs from "dayjs";
import { PrismaService } from "nestjs-prisma";
import {
    AvailablePlansEnum,
    MyContext, Plans
} from "../../interfaces/telegram.interface";
import { TelegramUtils } from "../../utils/telegram-utils";
import { ThirdLevelService } from "../Third/third_service.service";

@Injectable()
export class FourthLevelService {
    constructor(
        private readonly telegramUtils: TelegramUtils,
        private readonly thirdLevelService: ThirdLevelService,
        private readonly prismaService: PrismaService,
    ) {
    }

    getDayDeclension( days: number ): string {
        const lastDigit = days % 10;
        const lastTwoDigits = days % 100;

        if ( lastTwoDigits >= 11 && lastTwoDigits <= 14 ) {
            return '–¥–Ω–µ–π';
        }

        if ( lastDigit === 1 ) {
            return '–¥–µ–Ω—å';
        } else if ( lastDigit >= 2 && lastDigit <= 4 ) {
            return '–¥–Ω—è';
        } else {
            return '–¥–Ω–µ–π';
        }
    }

//     async handlePaymentHistory( ctx: MyContext ) {
//         const history = await this.userService.getUserPaymentHistory(ctx);
//
//         const text = `üí≥ *–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π*
//
// ${history.length > 0 ? '*–í–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:*' : '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π.'}
// ${history
//             .map(
//                 ( payment, index ) => `
// ${index + 1}. ${payment.plan} ‚Äî ${payment.amount}$ üí∏
//    üìÖ 01.${payment.month}.${payment.year} | ${payment.status === '–û–ø–ª–∞—á–µ–Ω–æ' ? '‚úÖ' : '‚ö†Ô∏è'} ${payment.status}`,
//             )
//             .join('\n')}
//
// _–í—Å–µ–≥–æ: ${String(history.length)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π_`;
//
//         const keyboard = {
//             inline_keyboard: [
//                 [ {
//                     text: 'üì• –í—ã–≥—Ä—É–∑–∏—Ç—å —á–µ–∫–∏',
//                     callback_data: 'download_receipts'
//                 } ],
//                 [ { text: 'üîô –ù–∞–∑–∞–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç', callback_data: 'my_account' } ],
//             ],
//         };
//
//         await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard);
//     }

    async handleChoosePlan( ctx: MyContext, planName: keyof typeof AvailablePlansEnum ) {
        ctx.session.selectedPlan = AvailablePlansEnum[planName];
        const minPrices = await this.prismaService.subscriptionPlan.findMany({
            where: { planId: ctx.session.selectedPlan, deviceRangeId: 1 },
        })

        const text = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏'
        const keyboard = {
            inline_keyboard: [
                [
                    {
                        text: `üìÖ 1 –º–µ—Å—è—Ü –æ—Ç ${minPrices[0].price}‚ÇΩ`,
                        callback_data: 'month_1'
                    },

                ],
                [
                    {
                        text: `üìÖ 3 –º–µ—Å—è—Ü–∞ –æ—Ç ${minPrices[1].price}‚ÇΩ`,
                        callback_data: 'month_3'
                    }
                ],
                [
                    {
                        text: `üìÖ 6 –º–µ—Å—è—Ü–µ–≤ –æ—Ç ${minPrices[2].price}‚ÇΩ`,
                        callback_data: 'month_6'
                    }
                ],
                [
                    {
                        text: `üìÖ 12 –º–µ—Å—è—Ü–µ–≤ –æ—Ç ${minPrices[3].price}‚ÇΩ`,
                        callback_data: 'month_12'
                    },
                ],
                [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'buy_vpn' } ], // üîô ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            ]
        }

        await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard)

    }

    async handleSubscriptionDetails( ctx: MyContext, subId: string ) {
        const subscriptionId = subId;
        const subscription = await this.prismaService.userSubscription.findUnique({
            where: { id: subscriptionId },
            include: {
                subscriptionPlan: {
                    include: {
                        plan: true,
                        deviceRange: true,
                    },
                },
            },
        });

        if ( !subscription ) {
            const text = '‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.';
            const keyboard = {
                inline_keyboard: [ [ {
                    text: 'üîô –ù–∞–∑–∞–¥',
                    callback_data: 'my_subscriptions'
                } ] ],
            };
            await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard);
            return;
        }
        const messageId = ctx.callbackQuery && ctx.callbackQuery.message && ctx.callbackQuery.message.message_id

        const isActive = dayjs().isBefore(dayjs(subscription.expiredDate));
        const expiredDate = dayjs(subscription.expiredDate).format('D MMMM YYYY [–≥.]')
        const twoMonthsFromNow = dayjs().add(2, 'month');
        const endDate = dayjs(subscription.expiredDate)
        const differenceDays = endDate.diff(dayjs(), 'day')

        const status = isActive ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ò—Å—Ç–µ–∫–ª–∞';
        const statusRenew = subscription.status === 'Active' ? '‚úÖ' : '‚ùå'
        const planName = subscription.subscriptionPlan?.plan?.name
        const deviceRange = subscription.subscriptionPlan?.deviceRange?.range || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

        const url = `${process.env.FRONTEND_DOMAIN}?chatId=${subscription.userId}&invoiceId=${subscription.lastInvoiceId}&amount=${subscription.subscriptionPlan.price}&months=${subscription.subscriptionPlan.months}&messageId=${messageId}&paymentType=extension`.trim()


        const text = `
üÜî ID: \`${subscriptionId}\`
üìã –¢–∞—Ä–∏—Ñ: *${Plans[AvailablePlansEnum[planName.toLowerCase()]]}*
üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤: *${deviceRange}*
‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç: *${expiredDate}*
üóìÔ∏è –î–Ω–µ–π –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏: *${differenceDays} ${this.getDayDeclension(differenceDays)}*

üîí VLESS —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: \`${subscription.vlessLinkConnection}\`

üîó URL —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${subscription.urlLinkConnection}

${isActive ? 'üü¢' : 'üî¥'} –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: ${status}
`;

        const keyboard = {
            inline_keyboard: [
                [ ...(endDate.isBefore(twoMonthsFromNow) ? [
                    {
                        text: 'üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                        web_app: { url }
                    },

                ] : []) ],
                [
                    {
                        text: `${statusRenew} –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ (–≤–∫–ª/–≤—ã–∫–ª)`,
                        callback_data: `update_sub-${subscriptionId}-${subscription.status === 'Active' ? 'Cancellation' : 'Activate'}`
                    }
                ],
                [
                    {
                        text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
                        callback_data: `sub_${subscriptionId}`
                    }
                ],
                [ ...(isActive ? [] : [ {
                    text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞',
                    callback_data: `delete_from_user_subscription-${subscriptionId}`,
                } ]) ],
                [
                    {
                        text: 'üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                        callback_data: 'start'
                    },
                    {
                        text: 'üîô –ù–∞–∑–∞–¥',
                        callback_data: 'my_subscriptions'
                    }
                ],
            ],
        };

        await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard);
    }

    async handleDeleteFromUserSubscription( ctx: MyContext, subId: string ) {
        await this.prismaService.userSubscription.delete({
            where: {
                id: subId,
            }
        })
        return await this.thirdLevelService.handleMySubscriptions(ctx)
    }
}