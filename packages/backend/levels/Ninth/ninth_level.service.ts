import { Injectable } from "@nestjs/common";
import * as dayjs from "dayjs";
import {
    MyContext,
    PromocodeTypes,
    StepsEnum
} from "../../interfaces/telegram.interface";
import { TelegramUtils } from "../../utils/telegram-utils";

@Injectable()
export class NinthLevelService {
    constructor(
        private readonly telegramUtils: TelegramUtils,
    ) {
    }

    async handleChooseAvailableCountUses( ctx: MyContext ) {
        ctx.session.step = StepsEnum.PROMOCODE_AVAILABLE_COUNT_USES
        if ( 'message' in ctx.update && 'text' in ctx.update.message ) {
            if ( dayjs(ctx.update.message.text, 'DD.MM.YYYY HH:mm', true).isValid() ) {
                ctx.session.promocodeExpiredDate = dayjs(ctx.update.message.text, 'DD.MM.YYYY HH:mm', true).toDate()
            } else {
                const text = '–î–∞—Ç–∞ –Ω–µ–≤–µ—Ä–Ω–∞'

                return await this.telegramUtils.sendOrEditMessage(ctx, text)
            }
        }

        const text = `üéâ –ü—Ä–æ–º–æ–∫–æ–¥ \`${ctx.session.promocode}\` –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è

üìã *_–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:_*

‚Ä¢ üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: \`${ctx.session.promocode}\`
‚Ä¢ ‚öôÔ∏è –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞: \`${PromocodeTypes[ctx.session.promocodeType as 'fixed' | 'percent']}\`
‚Ä¢ üí∏ –°–∫–∏–¥–∫–∞: \`${ctx.session.promocodeValue} ${ctx.session.promocodeType === 'percent' ? '%' : '‚ÇΩ'}\`
‚Ä¢ üí∏ –ú–∏–Ω. —Å—É–º–º–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: \`${ctx.session.promocodeMinOrderAmount} ‚ÇΩ\`
‚Ä¢ üìÖ –ú–∏–Ω. –∫–æ–ª-–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: \`${ctx.session.promocodeMinMonthsOrderAmount}\`
‚Ä¢ üìÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: \`${dayjs(ctx.session.promocodeExpiredDate).format('D MMMM YYYY [–≥.] HH:MM')}\`
‚Ä¢ üî¢ –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ‚îÅ‚îÅ
‚Ä¢ üë§ –ù–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ‚îÅ‚îÅ.
\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n
‚ö†Ô∏è *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* _–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞_ .
 `
        const keyboard = {
            inline_keyboard: [
                [
                    {
                        text: '250',
                        callback_data: 'choose_available_count_uses_250'
                    },
                    {
                        text: '500',
                        callback_data: 'choose_available_count_uses_500'
                    }
                ],
                [
                    {
                        text: '750',
                        callback_data: 'choose_available_count_uses_750'
                    },
                    {
                        text: '1000',
                        callback_data: 'choose_available_count_uses_1000'
                    }
                ],
                [ {
                    text: 'üîô –ù–∞–∑–∞–¥',
                    callback_data: `choose_min_months_order_amount_${ctx.session.promocodeMinMonthsOrderAmount}`
                } ] ]
        }

        if ( 'message' in ctx.update && 'text' in ctx.update.message && ctx.session.promocodeMessageId ) {
            try {
                await ctx.telegram.editMessageText(
                    ctx.update.message.from.id,
                    ctx.session.promocodeMessageId,
                    undefined,
                    this.telegramUtils.escapeMarkdown(text),
                    { reply_markup: keyboard, parse_mode: 'MarkdownV2' }
                );

            } catch ( e ) {
                console.log(e);
            }
        } else {
            await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard);

        }
    }

}