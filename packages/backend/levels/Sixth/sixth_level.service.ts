import { Injectable } from '@nestjs/common'
// biome-ignore lint/style/noNamespaceImport: <explanation>
import * as dayjs from 'dayjs'
import 'dayjs/locale/ru'
import { PrismaService } from 'nestjs-prisma'
import {
    MembersInPlan,
    MyContext,
    Plans
} from '../../interfaces/telegram.interface'
import { CloudPaymentsService } from '../../services/cloudpayments.service'
import { TelegramUtils } from '../../utils/telegram-utils'
import { WebhookController } from "../../webhooks/webhook.controller";

dayjs.locale('ru')

@Injectable()
export class SixthLevelService {
    constructor(
        private readonly telegramUtils: TelegramUtils,
        private readonly prismaService: PrismaService,
        private readonly webhookController: WebhookController
    ) {
    }

    async handleViewChosenPlan( ctx: MyContext ) {
        if ( ctx.callbackQuery && 'data' in ctx.callbackQuery ) {
            ctx.session.deviceRangeId = Number(ctx.callbackQuery.data.split('_')[1])
        }

        const subscription = await this.prismaService.subscriptionPlan.findFirst({
            where: {
                planId: ctx.session.selectedPlan,
                deviceRangeId: ctx.session.deviceRangeId,
                months: ctx.session.selectedMonths,
            },
        })

        const fetchedPrice = await this.prismaService.subscriptionPlan.findFirst({
            where: {
                planId: ctx.session.selectedPlan,
                deviceRangeId: ctx.session.deviceRangeId,
                months: 1
            }
        })

        const defaultPrice = fetchedPrice?.price


        if ( !subscription ) {
            const text = '–¢–∞–∫–æ–π —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω'
            const keyboard = {
                inline_keyboard: [
                    [
                        {
                            text: '–ù–∞–∑–∞–¥',
                            callback_data: `month_${ctx.session.selectedMonths}`,
                        },
                    ],
                ],
            }
            await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard)
            return
        }

        const pricePerMonth = Number(
            String(Math.floor(subscription.price / (ctx.session.selectedMonths as number))),
        )
        const randomNumber = Math.floor(1000000000 + Math.random() * 9000000000)
        const messageId = 'callback_query' in ctx.update && ctx.update.callback_query.message?.message_id
        const paymentAccountId = 'callback_query' in ctx.update && ctx.update.callback_query.from.id
        const paymentInvoiceId = String(randomNumber)
        const text = `
‚ú® *–ü–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ \\!*  

üìã *–¢–∞—Ä–∏—Ñ:*  *__${Plans[subscription.planId]}__*

üì± *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª\\-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:*  *_${MembersInPlan[subscription.deviceRangeId]}_*  

üí∞ *–¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –º–µ—Å—è—Ü:*  ~${defaultPrice}‚ÇΩ~ ‚û§ *_${pricePerMonth}‚ÇΩ_* 

üßæ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞:* *_${subscription.price}_* ‚ÇΩ

‚è≥ *–ö–æ–Ω–µ—Ü –ø–æ–¥–ø–∏—Å–∫–∏:*  *_${
            dayjs().add(subscription.months, 'month').format('DD.MM.YYYY')
        }_*  
`
        const url = `${process.env.FRONTEND_DOMAIN}?chatId=${paymentAccountId}&invoiceId=${paymentInvoiceId}&amount=${subscription.price}&months=${ctx.session.selectedMonths}&messageId=${messageId}&paymentType=pay`
        const keyboard = {
            inline_keyboard: [
                [
                    {
                        text: '–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                        web_app: { url },
                    },
                ],
                [
                    {
                        text: '–ù–∞–∑–∞–¥',
                        callback_data: `month_${ctx.session.selectedMonths}`,
                    },
                ],
            ],
        }

        await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard)
    }
}
