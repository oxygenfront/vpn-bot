import { Injectable } from "@nestjs/common";
import { PrismaService } from "nestjs-prisma";
import { Ctx } from "nestjs-telegraf";
import {
    AvailablePlansEnum,
    MyContext, PromocodeTypes, StepsEnum
} from "../../interfaces/telegram.interface";
import { TelegramUtils } from "../../utils/telegram-utils";

@Injectable()
export class FifthLevelService {
    constructor( private readonly telegramUtils: TelegramUtils,
                 private readonly prismaService: PrismaService ) {
    }

    async handleChooseValue( ctx: MyContext ) {
        ctx.session.step = StepsEnum.PROMOCODE_VALUE

        const text = `${ctx.session.promocodeType === 'percent' ?
            `üéâ –ü—Ä–æ–º–æ–∫–æ–¥ \`${ctx.session.promocode}\` –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è

üìã *_–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:_*

‚Ä¢ üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: \`${ctx.session.promocode}\`
‚Ä¢ ‚öôÔ∏è –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞: \`${PromocodeTypes[ctx.session.promocodeType as 'fixed' | 'percent']}\`
‚Ä¢ üí∏ –°–∫–∏–¥–∫–∞: ‚îÅ‚îÅ
‚Ä¢ üí∏ –ú–∏–Ω. —Å—É–º–º–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ‚îÅ‚îÅ
‚Ä¢ üìÖ –ú–∏–Ω. –∫–æ–ª-–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ‚îÅ‚îÅ
‚Ä¢ üìÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ‚îÅ‚îÅ
‚Ä¢ üî¢ –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ‚îÅ‚îÅ
‚Ä¢ üë§ –ù–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ‚îÅ‚îÅ.
\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n
‚ö†Ô∏è *–í–∞–∂–Ω–æ:* _–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100._` :

            `üéâ –ü—Ä–æ–º–æ–∫–æ–¥ \`${ctx.session.promocode}\` –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è !

üìã *_–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:_*

‚Ä¢ üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: \`${ctx.session.promocode}\`
‚Ä¢ ‚öôÔ∏è –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞: \`${PromocodeTypes[ctx.session.promocodeType as 'fixed' | 'percent']}\`
‚Ä¢ üí∏ –°–∫–∏–¥–∫–∞: ‚îÅ‚îÅ
‚Ä¢ üí∏ –ú–∏–Ω. —Å—É–º–º–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ‚îÅ‚îÅ
‚Ä¢ üìÖ –ú–∏–Ω. –∫–æ–ª-–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ‚îÅ‚îÅ
‚Ä¢ üìÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ‚îÅ‚îÅ
‚Ä¢ üî¢ –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ‚îÅ‚îÅ
‚Ä¢ üë§ –ù–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ‚îÅ‚îÅ
\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n
üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Å–∫–∏–¥–∫–∏:
1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ.
2Ô∏è‚É£ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, \`1000.50\`).
    
‚ö†Ô∏è *–í–∞–∂–Ω–æ:* _–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π._`}`
        const percentKeyboard = {
            inline_keyboard: [
                [
                    {
                        text: '10 %',
                        callback_data: 'choose_value_10'
                    },
                    {
                        text: '30 %',
                        callback_data: 'choose_value_30'
                    }
                ],
                [
                    {
                        text: '50 %',
                        callback_data: 'choose_value_50'
                    },
                    {
                        text: '70 %',
                        callback_data: 'choose_value_70'
                    }
                ],
                [
                    {
                        text: '90 %',
                        callback_data: 'choose_value_90'
                    },
                    {
                        text: '100 %',
                        callback_data: 'choose_value_100'
                    }
                ],
                [
                    {
                        text: 'üîô –ù–∞–∑–∞–¥',
                        callback_data: `handle_choose_type_promocode`
                    }
                ]
            ]
        }
        const fixedKeyboard = {
            inline_keyboard: [
                [
                    {
                        text: '100 ‚ÇΩ',
                        callback_data: 'choose_value_100'
                    },
                    {
                        text: '200 ‚ÇΩ',
                        callback_data: 'choose_value_200'
                    }
                ],
                [
                    {
                        text: '300 ‚ÇΩ',
                        callback_data: 'choose_value_300'
                    },
                    {
                        text: '500 ‚ÇΩ',
                        callback_data: 'choose_value_500'
                    }
                ],
                [
                    {
                        text: '700 ‚ÇΩ',
                        callback_data: 'choose_value_700'
                    },
                    {
                        text: '1000 ‚ÇΩ',
                        callback_data: 'choose_value_1000'
                    }
                ],
                [
                    {
                        text: 'üîô –ù–∞–∑–∞–¥',
                        callback_data: 'handle_choose_type_promocode'
                    }
                ]
            ]
        }
        const keyboard = ctx.session.promocodeType === 'percent' ? percentKeyboard : fixedKeyboard

        const message = await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard);
        if ( typeof message !== 'boolean' ) {
            ctx.session.promocodeMessageId = message.message_id
        }
    }

    async handleSelectMembers( @Ctx() ctx: MyContext ) {

        if ( ctx.callbackQuery && 'data' in ctx.callbackQuery ) {
            ctx.session.selectedMonths = Number(ctx.callbackQuery.data.split('_')[1])
        }
        if ( !(ctx.session.selectedPlan && ctx.session.selectedMonths) ) return

        const prices = await this.prismaService.subscriptionPlan.findMany({
            where: {
                planId: ctx.session.selectedPlan,
                months: ctx.session.selectedMonths
            },
        })


        await ctx.answerCbQuery();
        const text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã—Ö –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ' +
            ' –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø–æ–¥–ø–∏—Å–∫—É'
        const keyboard = {
            inline_keyboard: [
                [
                    {
                        text: `üì± –æ—Ç 1 –¥–æ 3 ‚Äî ${prices[0].price}‚ÇΩ`,
                        callback_data: 'deviceRangeId_1'
                    },

                ],
                [
                    {
                        text: `üì± –æ—Ç 3 –¥–æ 5 ‚Äî ${prices[1].price}‚ÇΩ`,
                        callback_data: 'deviceRangeId_2'
                    },
                ],
                [
                    {
                        text: `üì± –æ—Ç 5 –¥–æ 7 ‚Äî ${prices[2].price}‚ÇΩ`,
                        callback_data: 'deviceRangeId_3'
                    },
                ],
                [
                    {
                        text: 'üîô –ù–∞–∑–∞–¥',
                        callback_data: `plan_${AvailablePlansEnum[ctx.session.selectedPlan as number]}`
                    },
                    { text: 'üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }
                ],
            ],
        }
        await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard);
    }
}