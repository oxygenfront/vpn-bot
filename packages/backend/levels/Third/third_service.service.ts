import { Injectable } from "@nestjs/common";
import { PrismaService } from "nestjs-prisma";
import {
    AvailablePlansEnum,
    MyContext,
    Plans
} from "../../interfaces/telegram.interface";
import { UserService } from "../../services/user.service";
import { TelegramUtils } from "../../utils/telegram-utils";
import * as dayjs from "dayjs";

interface InlineKeyboardButton {
    text: string;
    callback_data: string;
}

@Injectable()
export class ThirdLevelService {
    constructor(
        private readonly telegramUtils: TelegramUtils,
        private readonly userService: UserService,
        private readonly prismaService: PrismaService
    ) {
    }

    async handlePromoCode( ctx: MyContext ) {
        const text = ctx.session.promocode
            ? `üéü *–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥:* \`${this.telegramUtils.escapeMarkdown(ctx.session.promocode)}\`

*–ü—Ä–∏–º–µ–Ω—ë–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞:* ${this.telegramUtils.escapeMarkdown(String(await this.userService.getPromoDiscount(ctx.session.promocode)))}%
*–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:* ${this.telegramUtils.escapeMarkdown(await this.userService.getPromoExpiry(ctx.session.promocode))}

–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥?`
            : `üéÅ *–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\\.
–ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å:
‚Ä¢ üè∑ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º
‚Ä¢ üéØ –ê–∫—Ü–∏–æ–Ω–Ω—ã–º
‚Ä¢ üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–º

_–ü—Ä–æ–º–æ–∫–æ–¥ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–µ_`;

        const keyboard = {
            inline_keyboard: [
                ...(ctx.session.promocode
                    ? [ [ {
                        text: 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥',
                        callback_data: 'change_promocode'
                    } ] ]
                    : []),
                [ {
                    text: 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞',
                    callback_data: 'buy_vpn'
                } ],
            ],
        };

        await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard);
    }

    async handleFaq( ctx: MyContext ) {
        const text = `‚ùì *–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã*

*üîπ –ß—Ç–æ —Ç–∞–∫–æ–µ VPN ?*
–≠—Ç–æ —Å–µ—Ä–≤–∏—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã\\.

*üîπ –ö–∞–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è?*
–ú—ã –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å \\- –≤—Å–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\\.

*üîπ –ù–∞ —Å–∫–æ–ª—å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?*
–û—Ç 1 –¥–æ 7 —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞\\.

*üîπ –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?*
–ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞—Ä—Ç—ã, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –∞ —Ç–∞–∫ –∂–µ —Ä–∞–±–æ—Ç–∞–µ–º —Å –°–ë–ü\\.

*üîπ –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ —ç—Ç–æ?*
–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É –∏ –Ω–µ —Ö—Ä–∞–Ω–∏–º –ª–æ–≥–∏\\.

*üîπ –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –º—ã?*
–° –Ω–∞–º–∏ –≤–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Ç—Ä–∞—Ñ–∏–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –Ω–∞–¥–µ–∂–Ω–æ–π –∑–∞—â–∏—Ç–æ–π\\.

_–ù–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç? –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–µ\\!_`;

        const keyboard = {
            inline_keyboard: [
                [ {
                    text: 'üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å',
                    url: 'https://t.me/vpn_by_oxy/8/34'
                } ],
                [
                    {
                        text: 'üìñ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã',
                        url: 'https://t.me/vpn_by_oxy/1/18'
                    },
                    {
                        text: 'üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                        url: 'https://t.me/vpn_by_oxy/8/34'
                    },
                ],
                [ { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'start' } ],
            ],
        };

        await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard);
    }

    async handleMySubscriptions( ctx: MyContext ) {
        const telegramId = String(ctx.callbackQuery?.from.id);
        const itemsPerPage = 4;

        const totalSubscriptions = await this.prismaService.userSubscription.count({
            where: {
                user: {
                    telegramId,
                },
            },
        });

        const totalPages = Math.ceil(totalSubscriptions / itemsPerPage);

        ctx.session.page = ctx.session.page || 1;
        let currentPage = Number(ctx.session.page);
        if ( currentPage < 1 ) currentPage = 1;
        if ( currentPage > totalPages ) currentPage = totalPages;

        ctx.session.page = currentPage;

        const skip = (currentPage - 1) * itemsPerPage;
        const take = itemsPerPage;

        const subscriptions = await this.prismaService.userSubscription.findMany({
            where: {
                user: {
                    telegramId
                },
            },
            skip: skip > 0 ? skip : 0,
            take,
            include: {
                subscriptionPlan: {
                    include: {
                        plan: true,
                        deviceRange: true,
                    },
                },
            },
        });


        if ( !subscriptions.length && currentPage === 1 ) {
            const text = `
üìã *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\\!*
–ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, –≤—ã–±—Ä–∞–≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ\\.
`;
            const keyboard: { inline_keyboard: InlineKeyboardButton[][] } = {
                inline_keyboard: [ [
                    {
                        text: 'üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                        callback_data: 'start'
                    },
                    {
                        text: 'üîô –ù–∞–∑–∞–¥',
                        callback_data: 'my_account'
                    }
                ] ],
            };
            await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard);
            return;
        }

        if ( !subscriptions.length ) {
            ctx.session.page = 1;
            return this.handleMySubscriptions(ctx);
        }

        let text = `
üìã *–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏*
–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\\. –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É\\.
`;

        subscriptions.forEach(( sub, index ) => {
            const isActive = dayjs().isBefore(dayjs(sub.expiredDate));
            const status = isActive ? 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' : 'üî¥ –ò—Å—Ç–µ–∫–ª–∞';
            const planName = sub.subscriptionPlan?.plan?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ';
            const deviceRange = sub.subscriptionPlan?.deviceRange?.range || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            const expiredDate = dayjs(sub.expiredDate).format('D MMMM YYYY [–≥.]');
            const pricePerMonth = Math.floor(sub.subscriptionPlan.price / sub.subscriptionPlan.months)

            text += `
*–ü–æ–¥–ø–∏—Å–∫–∞ ‚Ññ${skip + index + 1}*
üÜî ID: \`${this.telegramUtils.escapeMarkdown(sub.id)}\`
üìã –¢–∞—Ä–∏—Ñ: *${this.telegramUtils.escapeMarkdown(Plans[AvailablePlansEnum[planName.toLowerCase()]])}*
üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤: *${this.telegramUtils.escapeMarkdown(deviceRange)}*
‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç: *${this.telegramUtils.escapeMarkdown(expiredDate)}*
üí∞ –¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü: *${pricePerMonth}‚ÇΩ*
${status}
`;
        });

        if ( totalPages > 1 ) {
            text += `\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage} –∏–∑ ${totalPages}`;
        }

        const keyboard: { inline_keyboard: InlineKeyboardButton[][] } = {
            inline_keyboard: [],
        };

        subscriptions.forEach(( sub, index ) => {
            keyboard.inline_keyboard.push([
                {
                    text: `–ü–æ–¥–ø–∏—Å–∫–∞ ‚Ññ${skip + index + 1} ${dayjs().isBefore(dayjs(sub.expiredDate)) ? 'üü¢' : 'üî¥'}`,
                    callback_data: `sub_${sub.id}`,
                },
            ]);
        });

        if ( totalPages > 1 ) {
            const paginationButtons: InlineKeyboardButton[] = [];
            if ( currentPage > 1 ) {
                paginationButtons.push({
                    text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                    callback_data: `page_${currentPage - 1}`,
                });
            }
            if ( currentPage < totalPages ) {
                paginationButtons.push({
                    text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è',
                    callback_data: `page_${currentPage + 1}`,
                });
            }
            keyboard.inline_keyboard.push(paginationButtons);
        }

        keyboard.inline_keyboard.push([
            {
                text: 'üí≥ –ü–ª–∞—Ç–µ–∂–∏',
                callback_data: 'payment_history'
            },
        ], [
            {
                text: 'üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                callback_data: 'start'
            },
            {
                text: 'üîô –ù–∞–∑–∞–¥',
                callback_data: 'my_account'
            },

        ]);

        await this.telegramUtils.sendOrEditMessage(ctx, text, keyboard);
    }
}